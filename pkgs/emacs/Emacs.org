:PROPERTIES:
:TOC:      :include all
:END:
#+TITLE: Emacs Configuration
#+AUTHOR: Finnn Behrens <me@kloenk.dev>
#+PROPERTY: header-args:emacs-lisp :tangle init.el :comments org
#+STARTUP: fold


* Early init config
Taken from bedrock early init
#+begin_src emacs-lisp :tangle early-init.el
    (setq gc-cons-threshold 10000000)
    (setq byte-compile-warnings '(not obsolete))
    (setq warning-suppress-log-types '((comp) (bytecomp)))
    (setq native-comp-async-report-warnings-errors 'silent)

  ;; Silence stupid startup message
  (setq inhibit-startup-echo-area-message (user-login-name))
  
  ;; Default frame configuration: full screen, good-looking title bar on macOS
  (setq frame-resize-pixelwise t)

  (setq default-frame-alist '((fullscreen . maximized)

			      ;; You can turn off scroll bars by uncommenting these lines:
			      ;; (vertical-scroll-bars . nil)
			      ;; (horizontal-scroll-bars . nil)

			      ;; Setting the face in here prevents flashes of
			      ;; color as the theme gets activated
			      (background-color . "#000000")
			      (ns-appearance . dark)
			      (ns-transparent-titlebar . t)))
#+end_src

* Basic config
** Package source
Adding Melpa, Org and elpa as package source. and imply ~:ensure t~
#+begin_src emacs-lisp
  (setq package-archives '(
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

** Helper functions
**** Nix Detection
This config file is meant to be used with the nix package manager, but has some code if nix is not available.
#+begin_src emacs-lisp
  (defvar kloenk/build-by-nix-p (not (eq nil (string-match "/nix/store/[a-z0-9]*-*" user-init-file)))
    "If this Emacs was configured using nix")
#+end_src
*** OS Detection macro
Helper to detect os
#+begin_src emacs-lisp
  (defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))
#+end_src


** OS Level Config
*** Linux
**** Pasting
Map to meta c and v
#+begin_src emacs-lisp
   (with-system gnu/linux
     (global-set-key (kbd "M-v") 'clipboard-yank)
     (global-set-key (kbd "M-c") 'clipboard-kill-ring-save))
#+end_src


**** NixOS
***** Nix-based exec path
Nix substitutes its own folder on top of the exec-path every
time. Direnv will delete it from exec-path and break some things, so we
need to put it back.

#+begin_src emacs-lisp
(defvar kloenk/nix-exec-dir nil
  "Variable for Nix-built binary dependencies.")

(if kloenk/build-by-nix-p
    (setq kloenk/nix-exec-dir (car exec-path)))
#+end_src
*** MacOS
**** modifiers
Delete defaul modifiers and reconfigure for MacOS to allow other input modes.
#+begin_src emacs-lisp
  (with-system darwin
	       (setq mac-command-modifier 'meta
      mac-option-modifier 'none
      default-input-method "MacOSX"
      select-enable-clipboard t)
  (global-set-key (kbd "M-v") 'clipboard-yank)
  (global-set-key (kbd "M-c") 'clipboard-kill-ring-save))
#+end_src

** UI
Configure basic UI settings like disabling the startup message
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)       ; Disable visible scrollbar
  (tool-bar-mode -1)         ; Disable the toolbar
  (tooltip-mode -1)          ; Disable tooltips
  (set-fringe-mode 10)       ; Give some breathing room

  (menu-bar-mode -1)         ; Disable the menu bar

  (column-number-mode)
  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Keybind Configuration
#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)


  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'message-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Simplify Leader Bindings (general.el)
*** Package configuration
#+begin_src emacs-lisp
  ;(declare-function kloenk/key-def "General key definer")
  (use-package general
    :ensure t
    :config
    (general-create-definer kloenk/key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))
    ;:general
    ;(kloenk/key-def
    ;  "b d" '(kill-current-buffer :which-key "Kill current buffer")
    ;  "b k" '(kill-buffer :which-key "Kill buffer")
    ;  "b s" '(save-buffer :which-key "Save current buffer")
    ;  "b X" '(scratch-buffer :which-key "Switch to scratch buffer")))
                                          ;(kloenk/keybinds-buffer))

                                          ;(kloenk/key-def
                                          ;  "h" '(:ignore t :which-key "Help")
                                          ;  "t" '(:ignore t :whick-key "toggles")
                                          ;  "tt" '(counsel-load-theme :which-key "choose theme")))
                                          ;(unless kloenk/build-by-nix-p
                                          ;  (defun kloenk/reload-config ()
                                          ;    "Reload user init file"
                                          ;    (interactive)
                                          ;       (load-file user-init-file))
                                          ;  (kloenk/key-def
                                          ;    "h r" '(:ignore t :whick-key "reload")
                                          ;    "h r r" '(kloenk/reload-config :which-key "reload config")))
#+end_src
*** Buffer keybinds
#+begin_src emacs-lisp
  (defun kloenk/keybinds-buffer ()
      (kloenk/key-def
        "b d" '(kill-current-buffer :which-key "Kill current buffer")
        "b k" '(kill-buffer :which-key "Kill buffer")
        "b s" '(save-buffer :which-key "Save current buffer")
        "b X" '(scratch-buffer :which-key "Switch to scratch buffer")))
#+end_src

** Command Log Mode
#+begin_src emacs-lisp
  (use-package command-log-mode
    :ensure t)
#+end_src

*** Color Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-dracula t))
#+end_src

*** Better Modeline

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish whick-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :init
    (spaceline-spacemacs-theme)
    (spaceline-helm-mode))
#+end_src

Now we can set our settings.

#+begin_src emacs-lisp
(progn
  (setq powerline-height 24
        powerline-default-separator 'wave)
  ;; Disable some segments when waybar is active
  ;; Note: this will require re-enabling if you are
  ;; jumping in from TTY
  ;; but why would you?...
  ;(if (eq (call-process "pgrep" nil nil nil "waybar") 0)
  ;    (progn
  ;; Just disable these.
  (spaceline-toggle-org-clock-off)
  (spaceline-toggle-org-pomodoro-off)
        ;))
  (spaceline-emacs-theme 'timeclock))
#+end_src
** Ligatures
Turns out Emacs built with Cairo and Harfbuzz supports ligatures. Cute.
#+begin_src emacs-lisp
  (use-package ligature
    :ensure t
    :init
    (global-ligature-mode 1)
    :config
    (ligature-set-ligatures 't '("www"))
    (ligature-set-ligatures 'variable-pitch-mode '("ff" "fi" "ffi"))
    ;; Uses ligatures from Cascadia Code, but Fira Code has most of them too
    (ligature-set-ligatures '(prog-mode text-mode)
                            '( "|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                               ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                               "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                               "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                               "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                               "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                               "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                               "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:" 
                               ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                               "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                               "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                               "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                               "\\\\" "://")))
#+end_src

* Ivy and Counsel
** Helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :config
    (helm-mode 1)
    :diminish helm-mode
    :general
    (kloenk/key-def ":" '(helm-M-x :which-key "Find commands"))
    ("M-x" '(helm-M-x :which-key "Find Commands")))
#+end_src

** Counsel

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    ;:bind (("C-M-j" . 'counsel-switch-buffer)
    ;       :map minibuffer-local-map
    ;       ("C-r" . 'counsel-minibuffer-history))
    :diminish counsel-mode
    :general
    (kloenk/key-def
      "," '(counsel-switch-buffer :which-key "Switch buffer")
      "b ," '(counsel-switch-buffer :which-key "Switch buffer"))
    :config
    (counsel-mode 1))
#+end_src

** Helpfull
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :general
    (kloenk/key-def
      "h f" '(counsel-describe-function :which-key "Describe function")
      "h c" '(helpful-command :which-key "Describe command")
      "h v" '(counsel-describe-variable :which-key "Describe variable")
      "h k" '(helpful-key :which-key "Describe Key")))
    ;:bind
    ;([remap describe-function] . counsel-describe-function)
    ;([remap describe-command] . helpful-command)
    ;([remap describe-variable] . counsel-describe-variable)
    ;([remap describe-key] . helpful-key))
#+end_src

* Org Mode
** Better Font Faces
The ~kloenk/org-font-setup~ function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like
we’re editing a document in =org-mode=. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.
#+begin_src emacs-lisp
(defun kloenk/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
** Basic Config
#+begin_src emacs-lisp

  (defun kloenk/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defvar kloenk/org-files-tasks "~/Documents/OrgFiles/Tasks.org")
  (defvar kloenk/org-files-habits "~/Documents/OrgFiles/Habits.org")
  (defvar kloenk/org-files-journal "~/Documents/OrgFiles/Journal.org")
  (defvar kloenk/org-files-metrics "~/Documents/OrgFiles/Metrics.org")
  (defvar kloenk/org-files-birthdays "~/Documents/OrgFiles/Birthdays.org")

  (use-package org
    :ensure t
    :hook (org-mode . kloenk/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '(kloenk/org-files-tasks
            kloenk/org-files-habits
            kloenk/org-files-birthdays))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp kloenk/org-files-tasks "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree kloenk/org-files-journal)
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree kloenk/org-files-journal)
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree kloenk/org-files-journal)
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline kloenk/org-files-metrics "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
                (lambda () (interactive) (org-capture nil "jj")))

    (kloenk/org-font-setup)

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("s" . "src"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust")))

#+end_src

** Nicer heading Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Conter Org Buffers
#+begin_src emacs-lisp :tangle no

  (defun kloenk/org-mode-visual-fill ()
    (setq visual-fill-column-width 200
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . kloenk/org-mode-visual-fill))
#+end_src
** Block Templates
These templates enable you to type things like ~<el~ and then hit =Tab= to expand the template.
#+begin_src emacs-lisp :tangle no
  (use-package org-tempo
    :ensure org-plus-contrib
    :after org
    :config
    (add-to-list 'org-structure-template-alist '("s" . "src"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("rs" . "src rust")))
#+end_src
** Update Table of Contents on Save
#+begin_src emacs-lisp
  (use-package org-make-toc
    :ensure t
    :after org
    :hook org-mode)
#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp
  (defun kloenk/org-babel-tangle-config ()
    (interactive)
    (when (string-equal (helm-basename (buffer-file-name))
			"Emacs.org")
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'kloenk/org-babel-tangle-config)))
#+end_src
* Project management
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :general
    (kloenk/key-def
      "TAB o" '(projectile-switch-project :which-key "Switch project"))
    :config
    (setq projectile-project-search-path '(("~/Developer/" . 2) "~/proj/")))
  (use-package helm-projectile
    :ensure t
    :init
    (helm-projectile-on)
    :general
    (kloenk/key-def "," '(projectile-find-file :which-key "Find file in project")))
#+end_src
* Programing
** Environment
*** EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src
*** direnv
#+begin_src emacs-lisp
  ;; Patch direnv-mode to prepend kloenk/nix-exec-dir to exec-path
  (defun kloenk/direnv-update-directory-environment (&optional directory force-summary)
    "Update the environment for DIRECTORY.

    When FORCE-SUMMARY is non-nil or when called interactively, show a summary message."
    (interactive)
    (let ((directory (or directory default-directory))
          (old-directory direnv--active-directory)
          (items)
          (summary)
          (show-summary (or force-summary (called-interactively-p 'interactive))))
      (when (file-remote-p directory)
        (user-error "Cannot use direnv for remote files"))
      (setq direnv--active-directory directory
            items (direnv--export direnv--active-directory)
            summary (direnv--summarise-changes items))
      (when (and direnv-always-show-summary (not (string-empty-p summary)))
        (setq show-summary t))
      (when show-summary
        (direnv--show-summary summary old-directory direnv--active-directory))
      (dolist (pair items)
        (let ((name (car pair))
              (value (cdr pair)))
          (setenv name value)
          (when (string-equal name "PATH")
            (setq exec-path (append (list kloenk/nix-exec-dir) (parse-colon-path value) (list exec-directory)))
            ;; Prevent `eshell-path-env` getting out-of-sync with $PATH:
            (when (derived-mode-p 'eshell-mode)
              (setq eshell-path-env value)))))))

  (use-package direnv
    :ensure t
    :config
    (advice-add #'direnv-update-directory-environment :override #'kloenk/direnv-update-directory-environment)
    (direnv-mode))
#+end_src
** Support
*** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :config
    :general
    (kloenk/key-def
      :keymaps '(normal visual emacs eglot-mode-map)
      "c" '(:ignore t :which-key "code")
      "c r" '(eglot-rename :which-key "Eglot rename")
      "c e" '(flymake-goto-next-error :which-key "Goto next error")
      "c C-e" '(flymake-show-project-diagnostics :which-key "Show Project diagnostics")
      "c E" '(flymake-show-buffer-diagnostics :which-key "Show buffer diagnostics")
      "c o" '(eglot-code-action-organize-imports :which-key "Organize imports")
      "c h" '(eldoc)
      "c F" '(xref-find-definitions :which-key "Find definitions")
      "c f" '(eglot-format :which-key "Format")
      "c C-F" '(eglot-format-buffer :which-key "Format buffer")
      "c a" '(eglot-code-actions :which-key "Code Actions")))
#+end_src
*** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :config
    (add-hook 'prog-mode-hook 'company-mode))
#+end_src
** Langauges
*** Nix Mode
#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'"
    :after eglot
    :config
    (add-to-list 'eglot-server-programs '(nix-mode . ("rnix-lsp"))))

  (use-package nix-repl
    :ensure nix-mode
    :commands (nix-repl))
  (use-package nix-flake
    :ensure nix-mode
    :config
    (setq nix-flake-add-to-registry nil))
  (use-package helm-nixos-options
    :ensure t)

#+end_src

*** Rust
#+begin_src emacs-lisp :tangle no
  (use-package rust-ts-mode
    :ensure t
    :config
    (setq-default eglot-workspace-configuration
                  '( :rust-analyzer
                     ( :cargo (:buildScripts (:enable t) :allFeatures t)
                       :procMacro (:enable t)
                       ;:checkOnSave
                       ;( :command "clippy" :allFeatures t)
                       )
                     ))
    (setq lsp-rust-analyzer-proc-macro-enable t)
    (add-hook 'rust-ts-mode-hook #'direnv-update-directory-environment -100)
    (add-hook 'rust-ts-mode-hook #'eglot-ensure))
#+end_src
